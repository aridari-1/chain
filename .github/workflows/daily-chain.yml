name: Daily Global Chain (Rolling 24h SQL)

on:
  schedule:
    # Runs every 10 minutes
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  create-chain-and-clean-old:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    steps:
      - name: Fetch latest global chain
        id: latest
        run: |
          set -e
          echo "üîç Fetching the latest active global chain..."
          LATEST_JSON=$(curl -fsS \
            "$SUPABASE_URL/rest/v1/chains?type=eq.global&order=created_at.desc&limit=1" \
            -H "apikey: $SERVICE_KEY" \
            -H "Authorization: Bearer $SERVICE_KEY" \
            -H "Accept: application/json")
          echo "latest_json=$LATEST_JSON" >> $GITHUB_OUTPUT
          echo "‚úÖ Latest chain fetched."

      - name: Determine if we need to create a new chain
        id: decide
        run: |
          set -e
          latest_json='${{ steps.latest.outputs.latest_json }}'
          node -e "
            const data = ${latest_json || '[]'};
            const latest = Array.isArray(data) && data[0] ? data[0] : null;
            const needsNew = (() => {
              if (!latest) return true;
              const createdAt = new Date(latest.created_at).getTime();
              const now = Date.now();
              return (now - createdAt) >= 24 * 60 * 60 * 1000;
            })();
            const id = latest?.id || '';
            console.log('needsNew=' + needsNew);
            console.log('currentId=' + id);
          " | tee decide.log

          NEEDS_NEW=$(grep '^needsNew=' decide.log | cut -d= -f2)
          CURR_ID=$(grep '^currentId=' decide.log | cut -d= -f2)
          echo "needs_new=$NEEDS_NEW" >> $GITHUB_OUTPUT
          echo "current_id=$CURR_ID"  >> $GITHUB_OUTPUT
          echo "Decision: needs_new=$NEEDS_NEW"

      - name: Force create new global chain via SQL
        if: steps.decide.outputs.needs_new == 'true'
        id: create
        run: |
          set -e
          echo "üß† Executing SQL directly on Supabase..."
          SQL="update public.chains set active = false where type = 'global'; insert into public.chains (type, max_clips, creator_id, active) values ('global', null, null, true);"
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST "$SUPABASE_URL/rest/v1/rpc/execute_sql" \
            -H "apikey: $SERVICE_KEY" \
            -H "Authorization: Bearer $SERVICE_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"sql\": \"$SQL\"}")
          STATUS=$(tail -n1 response.json)
          echo "HTTP status: $STATUS"
          cat response.json
          if [ "$STATUS" -ge 400 ]; then
            echo "‚ùå SQL execution failed with $STATUS"
            exit 1
          fi
          echo "‚úÖ Chain created successfully via SQL."
          exit 0

      - name: Verify new active chain
        run: |
          set -e
          echo "üîé Checking that the new chain is active..."
          ACTIVE_CHAIN=$(curl -fsS \
            "$SUPABASE_URL/rest/v1/chains?type=eq.global&order=created_at.desc&limit=1" \
            -H "apikey: $SERVICE_KEY" \
            -H "Authorization: Bearer $SERVICE_KEY" \
            -H "Accept: application/json" )
          echo "Latest chain response:"
          echo "$ACTIVE_CHAIN"
          echo "‚úÖ Workflow completed successfully."
          exit 0
